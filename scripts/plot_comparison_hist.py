#
# plot_comparison_hist.py
#

"""
Plot comparison histogram using data generated by scripts/eval_for_hist.py.
Produces Figure 4 in the paper.
"""

import numpy as np
import matplotlib.pyplot as plt
import torch

import click

@click.command()
@click.option('--show', '-s', type=int, default=0)
def main(show):
    """
    Args:
        show (int): will show the figure if show > 0
    Notes:
        Figure saved to figs/hist_comp.pdf
    """

    # load simulations
    y_true = torch.load('./data/comparisons/y_true.th')
    y_reac = torch.load('./data/comparisons/reactive_ysim.th')
    y_const = torch.load('./data/comparisons/const_ysim.th')

    # compute MSE
    nll_reac = ((y_reac - y_true.unsqueeze(1))**2).mean(dim=[2,3]).flatten().numpy()
    nll_const = ((y_const - y_true.unsqueeze(1))**2).mean(dim=[2,3]).flatten().numpy()

    minnl = min([nll_reac.min(), nll_const.min()])
    maxnl = max([nll_reac.max(), nll_const.max()])

    bins = np.linspace(minnl, maxnl, 50)

    labels = ['R-SEIRD', 'SEIRD']

    # plot
    plt.figure(figsize=(4,3))

    for i, nll in enumerate([nll_reac, nll_const]):

        plt.hist(nll, bins=bins, label=labels[i], alpha=0.25, density=True)

    plt.xlabel(r'MSE$(y, \hat{y})$')
    plt.ylabel('Density')

    plt.legend()

    plt.tight_layout()

    plt.savefig('figs/hist_comp.pdf')

    if show > 0:
        plt.show()  


if __name__ == '__main__':
    main()